"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

#########################################################################################
#########################################################################################
############## LAST UPDATE 23RD FEBRUARY 2024   #########################################
#########################################################################################


# Importing necessary modules
from pathlib import Path  # Importing Path class for working with file paths
import environ  # Importing environ module for managing environment variables

# Creating an instance of Env class for managing environment variables
env = environ.Env()

# Reading environment variables from a .env file
environ.Env.read_env()




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')

#SET EMAIL TYPE
EMAIL_PROVIDER = env.bool('EMAIL_PROVIDER')

# Application definition

#####################################################################
############ INSTALLED APPS    ######################################
#####################################################################
INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	###############################
	## For Flatpages #########
	'django.contrib.sites',
	'django.contrib.sitemaps',
	'django.contrib.flatpages',
	########################
	###################
	'allauth',
	'allauth.account',
	'allauth.socialaccount',
	# 'allauth.socialaccount.providers.apple',
	# 'allauth.socialaccount.providers.facebook',
	# 'allauth.socialaccount.providers.google',
	# 'allauth.socialaccount.providers.instagram',
	# 'allauth.socialaccount.providers.openid',
	# 'allauth.socialaccount.providers.openid_connect',
	#########################
	'django_social_share',
	'taggit',
	'crispy_forms',
	'crispy_bootstrap5',
	'easy_thumbnails',
	"admin_honeypot",
	'kyc',
	'sweetify',
	###### DJANGO APPS ###################
	'seo',
	'users',
	'pages',
	'wallet',
	'trade',
	'launchpad',
	'stake',
	'currency',
	# 'blockchain',
	# 'plan',
	'copy_trader',
]



SITE_ID = 1

# SWEETIFY MESSAGE LIBRARY
SWEETIFY_SWEETALERT_LIBRARY = 'sweetalert2'

#####################################################################
############ MIDDLEWARE SETTING  ####################################
#####################################################################
MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	#########################################################
	"django_htmx.middleware.HtmxMiddleware",# Add request.htmx
	"allauth.account.middleware.AccountMiddleware",# All Auth
	#########################################################

]




ROOT_URLCONF = 'website.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [BASE_DIR / 'templates'],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				#######################################################
				'seo.context_processors.all_pages',
				############### SHOP CONTEXT PROCESSORS #################
				# "shop.context_processors.cart_context",
				# "shop.context_processors.wishlist_context",

				#########################################################
				############### BLOG CONTEXT PROCESSORS #################
				# "blog.context_processors.all_categories",
				# "blog.context_processors.all_tags",




			],
		},
	},
]


AUTHENTICATION_BACKENDS = (

	# Needed to login by username in Django admin, regardless of `allauth`
	'django.contrib.auth.backends.ModelBackend',

	# `allauth` specific authentication methods, such as login by e-mail
	'allauth.account.auth_backends.AuthenticationBackend',

)


WSGI_APPLICATION = 'website.wsgi.application'

#### USER MODEL
AUTH_USER_MODEL = "users.User"


#####################################################################
############ DATABASE SETTINGS ######################################
#####################################################################
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
	"default": {
		"ENGINE": 'django.db.backends.postgresql_psycopg2',
		"NAME": env.str("DB_NAME"),
		"USER": env.str("DB_USERNAME"),
		"PASSWORD": env.str("DB_PASSWORD"),
		"HOST": env.str("DB_HOSTNAME"),
		"PORT": env.int("DB_PORT"),
	}
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

#####################################################################
################### APPS SETTINGS ###################################
#####################################################################

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
	'google': {
		# For each OAuth based provider, either add a ``SocialApp``
		# (``socialaccount`` app) containing the required client
		# credentials, or list them here:
		'APP': {
			'client_id': '123',
			'secret': '456',
			'key': ''
		}
	}
}



# CRONJOBS = [
#     ('*/2 * * * *', 'trade.management.commands.check_trades')
# ]


###### CRISPY FORM
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = 'bootstrap5'


THUMBNAIL_ALIASES = {
	'': {
		'icon': {'size': (50, 50)},
		'game':{'size':(300, 300), 'crop':True},
		# 'list_image': {'size': (624, 480)},
		# 'list_image': {'size': (624, 480), 'crop': True},# NOTE
		# 'slide_car_big': {'size': (1236, 750)},
		# 'slide_car_small': {'size': (282, 186)},
		# 'service_list': {'size': (636, 496)},
		

	},
}




############# DJANGO ADMIN HONEYPOT SETTINGS
# Length of time (in seconds) to ban IP address after a login attempt
ADMIN_HONEYPOT_TIMEOUT = 3600  # Default: 60 seconds

# Number of allowed login attempts before banning the IP address
ADMIN_HONEYPOT_LOGIN_ATTEMPTS = 3  # Default: 3 attempts

# Email address to send alert notifications
ADMIN_HONEYPOT_EMAIL_ADMINS = True



#####################################################################
############ ALL AUTH SETTINGS ######################################
#####################################################################
''' These configuration can be found here :
 https://docs.allauth.org/en/latest/account/configuration.html'''

######### TO DISABLE EMAILS SENDING 
# settings.py
# ACCOUNT_ADAPTER = 'users.adapters.NoEmailAccountAdapter'

'''where to login user after redirect '''
LOGIN_REDIRECT_URL = 'trade:place_a_trade'
# LOGIN_REDIRECT_URL = 'users:dashboard'

'''where to redirect to after user logout '''
LOGOUT_REDIRECT_URL = 'pages:home_page'

'''url to redirect to when login is needed '''
LOGIN_URL = 'account_login'

'''what is use to login a user '''
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# ACCOUNT_AUTHENTICATION_METHOD = "email"
# ACCOUNT_AUTHENTICATION_METHOD = "username"

'''Maximum number of emails that can be connected to an account()'''
# ACCOUNT_MAX_EMAIL_ADDRESSES = 3 #If you want them to have multiple emails linked to acct
# or
# ACCOUNT_CHANGE_EMAIL = True #You want them to only change their email but no multiple

'''When enabled, account related security notifications, 
such as “Your password was changed”, including information
 on user agent / IP address from where the change originated, will be emailed '''
ACCOUNT_EMAIL_NOTIFICATIONS = True

'''Determines the expiration date of email confirmation mails '''
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1 #Days

'''Email must be field doing registration '''
ACCOUNT_EMAIL_REQUIRED = True

''' If email must be verified or not options are "mandatory", "optional", or "none" 
mandatory : verification email is sent and must be verified b4 user can login
optional : verification email is sent but must not be confirmed
none : no email verification is sent
'''
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'


'''Account Form: Used to override the builtin forms. Defaults to '''
# ACCOUNT_FORMS = {
#     'add_email': 'allauth.account.forms.AddEmailForm',
#     'change_password': 'allauth.account.forms.ChangePasswordForm',
#     'login': 'allauth.account.forms.LoginForm',
#     'reset_password': 'allauth.account.forms.ResetPasswordForm',
#     'reset_password_from_key': 'allauth.account.forms.ResetPasswordKeyForm',
#     'set_password': 'allauth.account.forms.SetPasswordForm',
#     'signup': 'allauth.account.forms.SignupForm',
#     'user_token': 'allauth.account.forms.UserTokenForm',

#     # You can change it like this
#     'signup': 'user.forms.MyCustomSignupForm',#custom
#     'login': 'user.forms.MyCustomLoginForm',#custom

# }

ACCOUNT_FORMS = {
	'signup': 'users.forms.CustomSignupForm',
}



# When user click on logout he should be logout without another prompt for confirmation
ACCOUNT_LOGOUT_ON_GET = True

# Adding rate to actions
'''
The rate itself is an amount, per time unit, per either IP address, 
user or action-specific key.
'''
# ACCOUNT_RATE_LIMITS = {"action": "your-rate-limit",}
###### DEFAULT VALUES
# ACCOUNT_RATE_LIMITS = {
#     "change_password" : "5/m/user",
#     "manage_email" : "10/m/user",
#     "reset_password" : "20/m/ip,5/m/key",
#     "reauthenticate" : "10/m/user",
#     "reset_password_from_key" : "20/m/ip",
#     "signup" : "20/m/ip",
#     "login" : "30/m/ip",
#     "login_failed" : "10/m/ip,5/5m/key",
#     "confirm_email" : "1/3m/key",
# }


'''  whether or not reauthentication is required before the user can alter his account'''
ACCOUNT_REAUTHENTICATION_REQUIRED = True

'''When signing up, let the user type in their email address twice to avoid typo’s'''
# ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True

'''A string pointing to a custom form class that is used during signup to ask
 the user for additional input (e.g. newsletter signup, birth date). 
 This class should implement a def signup(self, request, user) method, 
 where user represents the newly signed up user ''' 
# ACCOUNT_SIGNUP_FORM_CLASS = 'myapp.forms.SignupForm'


'''When signing up, let the user type in their password twice to avoid typos ''' 
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True

'''A list of usernames that can’t be used by user '''
ACCOUNT_USERNAME_BLACKLIST = ['admin','isaac','user','user1','user2']


'''The name of the field containing the email, if any. See custom user models
Default is email'''
# ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"

'''The name of the field containing the username, if any. See custom user models.
default is username '''
# ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"

'''An integer specifying the minimum allowed length of a username.'''
ACCOUNT_USERNAME_MIN_LENGTH = 4


''' The user is required to enter a username when signing up. 
Note that the user will be asked to do so even if ACCOUNT_AUTHENTICATION_METHOD
 is set to email. Set to False when you do not wish to prompt the user to enter a username'''
# ACCOUNT_USERNAME_REQUIRED = True


# To control the redirect after login, if LOGIN_REDIRECT is not okay
# ACCOUNT_ADAPTER = 'website.users.adapter.MyAccountAdapter'







ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
# ACCOUNT_USERNAME_BLACKLIST = ['admin', 'admin1', 'admin2', ]

ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_USERNAME_REQUIRED = False



# The issuer (appearing in the TOTP QR code).
MFA_TOTP_ISSUER = "Trade xSphere"

#####################################################################
#####################################################################
#####################################################################


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True




# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
	messages.DEBUG: 'alert-info',
	messages.INFO: 'alert-info',
	messages.SUCCESS: 'alert-success',
	messages.WARNING: 'alert-warning',
	messages.ERROR: 'alert-danger',
}


#Specifying to django where to look for the static files
STATICFILES_DIRS = [
	(BASE_DIR / 'website/static')
]

#url to access your static files 
STATIC_URL = '/static/'

#where to save the static files to, when we run collectstatics 
STATIC_ROOT = (BASE_DIR / 'static')

#Directory where our media files will be saved to
MEDIA_ROOT = (BASE_DIR /'media')

#Url in which we can access our media files
MEDIA_URL = '/media/'

# --------------------------------------------------------------------------- #
AUTHOR = "Programmer "
SITE_NAME = 'Trade xSphere'
META_KEYWORDS = '''comma,separeted,words,for,seo,purpose, '''
META_DESCRIPTION = '''Detail description of what the website is about '''
SITE_TAGLINE = "Safe place for trading cryptos"
PAGE_TITLE = "Trade xSphere "
PAGE_TYPE = "Post"
PAGE_URL = "ffffffffffff"
PAGE_IMAGE = "jjjjjjjjjj"
VIDEO_URL = "wwwwwwww "
# --------------------------------------------------------------------------- #
if EMAIL_PROVIDER:
	EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
	EMAIL_HOST = env.str("EMAIL_HOST")
	EMAIL_USE_SSL = env.bool("EMAIL_USE_SSL")
	EMAIL_PORT = env.int("EMAIL_PORT")
	EMAIL_HOST_USER = env.str("EMAIL_HOST_USER")
	EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD")
	DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL")
else:
	EMAIL_BACKEND="django.core.mail.backends.console.EmailBackend"


######### COIN API KEY
COIN_API_KEY = env.str("COIN_API_KEY")
LIVE_COIN_WATCH_API_KEY = env.str("LIVE_COIN_WATCH_API_KEY")


INFURA_ETH_NETWORK = env.str("INFURA_ETH_NETWORK")
ETHERSCAN_API_KEY = env.str("ETHERSCAN_API_KEY")
BLOCKCYPHER_API_KEY = 'your_blockcypher_api_key'
ENCRYPTION_KEY = env.str("ENCRYPTION_KEY")


if DEBUG:
	##################################################
	############ DEBUG CONFIGURATION #################
	##################################################
	INSTALLED_APPS += [
		"debug_toolbar",
	]
	MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]

	def show_toolbar(request):
		return True

	DEBUG_TOOLBAR_CONFIG = {
		"DISABLE_PANELS": ["debug_toolbar.panels.redirects.RedirectsPanel"],
		"SHOW_TEMPLATE_CONTEXT": True,
		"SHOW_TOOLBAR_CALLBACK": show_toolbar,
	}

	INTERNAL_IPS = [
		"127.0.0.1",
	]





######################################################################
from datetime import timedelta

# Celery settings
# CELERY_BROKER_URL = 'redis://localhost:6379/0'#without password
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'#without password
CELERY_BROKER_URL = env.str("CELERY_BROKER_URL")# Use Redis as broker
CELERY_RESULT_BACKEND = env.str("CELERY_RESULT_BACKEND")# Redis backend for storing task results
CELERY_TIMEZONE = 'UTC'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


### SINCE AM NOT USING CELERY BEAT NO NEED FOR THIS
# CELERY_BEAT_SCHEDULE = {
#     # 'test-celery-for-me': {
#     #     'task': 'wallet.tasks.my_task',
#     #     'schedule': timedelta(seconds=5),  # Run every 5 minutes
#     # },
#     # 'monitor-deposits-every-5-minutes': {
#     #     'task': 'wallet.tasks.monitor_deposits',
#     #     'schedule': timedelta(minutes=1),  # Run every 1 minutes
#     # },
#     # 'checks-trades-every-hour': {
#     #     'task': 'wallet.tasks.run_check_trades',
#     #     # 'schedule': timedelta(hours=1),  # Run every hour
#     #     'schedule': timedelta(minutes=5),  # Run every 5 minutes
#     # },
# }